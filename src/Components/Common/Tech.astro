---
// Group technologies by category for better organization
const techCategories = [
	{
		category: 'Languages',
		items: [
			{
				name: 'HTML',
				icon: 'html5',
				color: '#E34F26',
			},
			{
				name: 'CSS',
				icon: 'css3',
				color: '#1572B6',
			},
			{
				name: 'JavaScript',
				icon: 'javascript',
				color: '#F7DF1E',
			},
			{
				name: 'TypeScript',
				icon: 'typescript',
				color: '#3178C6',
			},
			{
				name: 'Python',
				icon: 'python',
				color: '#3776AB',
			},
			{
				name: 'C#',
				icon: 'csharp',
				color: '#239120',
			},
		],
	},
	{
		category: 'Frontend',
		items: [
			{
				name: 'React',
				icon: 'react',
				color: '#61DAFB',
			},
			{
				name: 'React Native',
				icon: 'react',
				color: '#61DAFB',
			},
			{
				name: 'Astro',
				icon: 'astro',
				invert: true,
				color: '#FF5D01',
			},
			{
				name: 'Tailwind CSS',
				icon: 'tailwindcss',
				color: '#06B6D4',
			},
			{
				name: 'NextJS',
				icon: 'nextjs',
				invert: true,
				color: '#000000',
			},
		],
	},
	{
		category: 'Backend',
		items: [
			{
				name: 'ExpressJS',
				icon: 'express',
				invert: true,
				color: '#000000',
			},
			{
				name: 'NestJS',
				icon: 'nestjs',
				color: '#E0234E',
			},
			{
				name: 'GraphQL',
				icon: 'graphql',
				iconImage: 'https://raw.githubusercontent.com/devicons/devicon/master/icons/graphql/graphql-plain.svg',
				color: '#E10098',
			},
		],
	},
	{
		category: 'Databases',
		items: [
			{
				name: 'MySQL',
				icon: 'mysql',
				color: '#4479A1',
			},
			{
				name: 'PostgreSQL',
				icon: 'postgresql',
				color: '#4169E1',
			},
			{
				name: 'MongoDB',
				icon: 'mongodb',
				color: '#47A248',
			},
		],
	},
	{
		category: 'DevOps & Tools',
		items: [
			{
				name: 'Git',
				icon: 'git',
				color: '#F05032',
			},
			{
				name: 'GitHub',
				icon: 'github',
				invert: true,
				color: '#181717',
			},
			{
				name: 'Docker',
				icon: 'docker',
				color: '#2496ED',
			},
			{
				name: 'Vercel',
				icon: 'vercel',
				invert: true,
				color: '#000000',
			},
			{
				name: 'AWS',
				icon: 'aws',
				iconImage:
					'https://raw.githubusercontent.com/devicons/devicon/master/icons/amazonwebservices/amazonwebservices-original-wordmark.svg',
				color: '#232F3E',
			},
			{
				name: 'Hostinger',
				icon: 'hostinger',
				iconImage: 'https://cdn.worldvectorlogo.com/logos/hostinger.svg',
				color: '#673DE6',
			},
		],
	},
];

// Flatten the categories for the grid view option
const TechStack = techCategories.flatMap((category) => category.items);

// Lenguaje
import { useLocale } from '@/Hooks/useLocale';
const { t } = useLocale(Astro);
---

<style>
	.tech-item {
		transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
		position: relative;
		z-index: 1;
		overflow: hidden;
	}

	.tech-item:hover {
		transform: translateY(-4px);
	}

	.tech-item:hover .tech-icon {
		transform: scale(1.05);
		box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
	}

	.tech-icon {
		transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
		overflow: hidden;
		position: relative;
		z-index: 1;
		backdrop-filter: blur(4px);
	}

	.tech-icon::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: radial-gradient(circle, rgba(255, 255, 255, 0) 60%, rgba(14, 165, 233, 0.2) 100%);
		z-index: -1;
		opacity: 0;
		transition: opacity 0.4s ease;
	}

	.tech-item:hover .tech-icon::before {
		opacity: 1;
	}

	.tech-name {
		transition: all 0.3s ease;
		position: relative;
		padding-bottom: 4px;
	}

	.tech-name::after {
		content: '';
		position: absolute;
		bottom: 0;
		left: 50%;
		width: 0;
		height: 2px;
		background: rgb(14, 165, 233);
		transition: all 0.3s ease;
		transform: translateX(-50%);
	}

	.tech-item:hover .tech-name {
		color: rgb(14, 165, 233);
	}

	.tech-item:hover .tech-name::after {
		width: 70%;
	}

	.category-title {
		position: relative;
		display: inline-block;
		margin-bottom: 1rem;
		padding-bottom: 0.4rem;
	}

	.category-title::after {
		content: '';
		position: absolute;
		bottom: 0;
		left: 0;
		width: 30px;
		height: 2px;
		background: linear-gradient(90deg, rgb(14, 165, 233), rgba(14, 165, 233, 0.3));
		border-radius: 2px;
	}

	.tech-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
		gap: 1rem;
	}

	.category-section {
		margin-bottom: 2rem;
	}

	.category-section:last-child {
		margin-bottom: 0;
	}

	@media (prefers-color-scheme: dark) {
		.tech-icon::before {
			background: radial-gradient(circle, rgba(30, 41, 59, 0) 60%, rgba(14, 165, 233, 0.2) 100%);
		}
	}

	.view-toggle {
		display: flex;
		align-items: center;
		justify-content: center;
		margin-bottom: 1.5rem;
	}

	.toggle-btn {
		padding: 0.35rem 0.75rem;
		border-radius: 9999px;
		font-size: 0.8rem;
		font-weight: 500;
		cursor: pointer;
		transition: all 0.3s ease;
	}

	.toggle-btn.active {
		background: linear-gradient(135deg, #0ea5e9 0%, #0284c7 100%);
		color: white;
		box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
	}

	.tech-container {
		opacity: 0;
		transition: opacity 0.5s ease;
		margin-bottom: 0;
	}

	.tech-container.visible {
		opacity: 1;
	}

	#gridContainer {
		position: absolute;
		width: 100%;
		left: 0;
		top: 0;
		height: 0;
		overflow: hidden;
	}

	#gridContainer.visible {
		position: relative;
		height: auto;
		overflow: visible;
	}
</style>

<div class='container mx-auto px-4 py-4 pb-0 relative'>
	<!-- View Toggle -->
	<div class='view-toggle'>
		<button id='categoryView' class='toggle-btn active mr-2 border border-slate-200 dark:border-slate-700'>
			<i class='fa-solid fa-layer-group mr-2'></i>{t('Tech.CategoryView')}
		</button>
		<button id='gridView' class='toggle-btn border border-slate-200 dark:border-slate-700'>
			<i class='fa-solid fa-table-cells mr-2'></i>{t('Tech.GridView')}
		</button>
	</div>

	<!-- Category View -->
	<div id='categoryContainer' class='tech-container visible'>
		{
			techCategories.map((category) => (
				<div class='category-section'>
					<h3 class='category-title text-lg font-bold text-slate-800 dark:text-white'>{category.category}</h3>
					<div class='tech-grid'>
						{category.items.map((tech) => (
							<div
								class='tech-item flex flex-col items-center justify-center'
								data-aos='fade-up'
								data-aos-duration='800'
								data-aos-once='true'
								data-aos-delay={Math.floor(Math.random() * 300)}>
								<div
									class='tech-icon flex items-center justify-center p-2 border-2 rounded-xl shadow-md w-16 h-16 bg-white dark:bg-slate-800 border-slate-200 dark:border-slate-700 mb-2'
									style={`border-color: ${tech.color}20;`}>
									<img
										class={`w-10 h-10 object-contain ${tech.invert ? 'dark:invert' : ''}`}
										src={
											tech.iconImage
												? tech.iconImage
												: `https://raw.githubusercontent.com/devicons/devicon/master/icons/${tech.icon}/${tech.icon}-original.svg`
										}
										alt={tech.name}
										loading='lazy'
									/>
								</div>
								<span class='tech-name text-center text-slate-700 dark:text-slate-200 font-medium text-sm'>
									{tech.name}
								</span>
							</div>
						))}
					</div>
				</div>
			))
		}
	</div>

	<!-- Grid View -->
	<div id='gridContainer' class='tech-container'>
		<div class='grid grid-cols-3 gap-4 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 xl:grid-cols-8 mb-0'>
			{
				TechStack.map((tech, index) => (
					<div
						class='tech-item flex flex-col items-center justify-center'
						data-aos='fade-up'
						data-aos-duration='800'
						data-aos-once='true'
						data-aos-delay={Math.floor(Math.random() * 300)}>
						<div
							class='tech-icon flex items-center justify-center p-2 border-2 rounded-xl shadow-md w-16 h-16 bg-white dark:bg-slate-800 border-slate-200 dark:border-slate-700 mb-2'
							style={`border-color: ${tech.color}20;`}>
							<img
								class={`w-10 h-10 object-contain ${tech.invert ? 'dark:invert' : ''}`}
								src={
									tech.iconImage
										? tech.iconImage
										: `https://raw.githubusercontent.com/devicons/devicon/master/icons/${tech.icon}/${tech.icon}-original.svg`
								}
								alt={tech.name}
								loading='lazy'
							/>
						</div>
						<span class='tech-name text-center text-slate-700 dark:text-slate-200 font-medium text-sm'>
							{tech.name}
						</span>
					</div>
				))
			}
		</div>
	</div>
</div>

<script>
	import AOS from 'aos';

	document.addEventListener('astro:page-load', () => {
		// Initialize AOS with custom settings
		AOS.init({
			duration: 800,
			easing: 'ease-out-cubic',
			once: true,
			offset: 30,
			disableMutationObserver: false,
		});

		// View toggle functionality
		const categoryView = document.getElementById('categoryView');
		const gridView = document.getElementById('gridView');
		const categoryContainer = document.getElementById('categoryContainer');
		const gridContainer = document.getElementById('gridContainer');

		if (categoryView && gridView && categoryContainer && gridContainer) {
			// Set initial state - grid container should be hidden by default
			gridContainer.style.display = 'none';

			categoryView.addEventListener('click', () => {
				categoryView.classList.add('active');
				gridView.classList.remove('active');

				// Hide grid view first
				gridContainer.classList.remove('visible');
				gridContainer.style.display = 'none';

				// Show category view
				categoryContainer.style.display = 'block';
				setTimeout(() => {
					categoryContainer.classList.add('visible');
					AOS.refresh();
				}, 50);
			});

			gridView.addEventListener('click', () => {
				gridView.classList.add('active');
				categoryView.classList.remove('active');

				// Hide category view first
				categoryContainer.classList.remove('visible');
				categoryContainer.style.display = 'none';

				// Show grid view
				gridContainer.style.display = 'block';
				setTimeout(() => {
					gridContainer.classList.add('visible');
					AOS.refresh();
				}, 50);
			});
		}
	});
</script>
